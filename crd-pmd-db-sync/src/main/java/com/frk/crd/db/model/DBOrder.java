package com.frk.crd.db.model;

import com.frk.crd.model.IOrder;
import lombok.Getter;
import lombok.Setter;

import java.util.Date;

@Getter
@Setter
public class DBOrder implements IOrder {
  private String orderId;
  private String instruction;
  private String brokerReason;
  private String netTradeIndicator;
  private String orderDuration;
  private String exchangeCode;
  private String trader;
  private String manager;
  private String createUser;
  private String lastUpdateUser;
  private String comments;
  private String transactionType;
  private String invoiceClassCode;
  private String status;
  private String includeInCash;
  private String deliveryType;
  private String counterparty;
  private String executingBroker;
  private Date tradeDate;
  private Date toTradeDate;
  private String ipo;
  private Date lastUpdateDate;
  private String orderAccountCode;
  private Double targetQuantity;
  private Double targetAmount;
  private String targetDiscountRate;
  private Double executionDiscountRate;
  private String principleLocalCurrencySecId;
  private String udfFloat16;
  private String taxLotSellConvention;
  private Double netPrincipleAmount;
  private Double targetNotionalBaseAmount;
  private Double targetNotionalAmount;
  private Double executionPx;
  private Double executionQuantity;
  private Double executionAmount;
  private Double netMoney;
  private String commissionIndicator;
  private Double commissionAmount;
  private Double currentBaseMarketValue;
  private String accountCode;
  private String transactionSubType;
  private String secId;
  private String externalSecId;
  private String lifetimeCap;
  private String lifetimeFloor;
  private Date authDate;
  private String authUser;
  private Double contractSize;
  private String executionDirtyFlag;
  private Double executionDirtyPx;
  private Double executionYield;
  private String executionYieldType;
  private Double factor;
  private String fee1Code;
  private Double fee1;
  private String fee2Code;
  private Double fee2;
  private String fee3Code;
  private Double fee3;
  private String fee4Code;
  private Double fee4;
  private String fee5Code;
  private Double fee5;
  private String fee6Code;
  private Double fee6;
  private String fromCurrency;
  private Date fastUpdateDate;
  private Double limitPx;
  private Date placeDate;
  private String principalLocalCurrency;
  private String reasonCode;
  private Double referencePx;
  private String scenarioId;
  private Date settleDate;
  private String specialInstruction;
  private String targetCurrency;
  private String toCurrency;
  private String userClassCode3;
  private String userClassCode4;
  private Date udfDate2;
  private String currencyPair;
  private Double dealPx;
  private Double executionSpotRate;
  private Double idxFactor;
  private String referenceSecId;
  private String swapPartyIndicator;
  private String udFChar3;
  private String udFChar4;
  private String udFChar5;
  private String udFChar6;
  private String udFChar10;
  private String udfChar13;
  private String udfChar17;
  private String udfChar19;
  private String udFChar22;
  private Double udfFloat5;
  private Double upfrontPercent;
  private String valueBased;
  private Date valuationDate;
  private Double yield;
  private Double originalTargetValue;
  private String clearingVenueCode;
  private String otcClearingEligibleIndicator;
  private Double dealSpread;
  private String udfChar12;
  private String tradingVenue;
  private Date executionDateTime;
}